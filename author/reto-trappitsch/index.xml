<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Reto Trappitsch | Galactic Forensics Laboratory</title><link>https://galactic-forensics.space/author/reto-trappitsch/</link><atom:link href="https://galactic-forensics.space/author/reto-trappitsch/index.xml" rel="self" type="application/rss+xml"/><description>Reto Trappitsch</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© (2023) · Galactic Forensics Laboratory</copyright><image><url>https://galactic-forensics.space/author/reto-trappitsch/avatar_hu0d2e1512ae62b80dce29db052355fb2a_60590_270x270_fill_q90_lanczos_center.jpg</url><title>Reto Trappitsch</title><link>https://galactic-forensics.space/author/reto-trappitsch/</link></image><item><title>Hands-on Astrophysics</title><link>https://galactic-forensics.space/resources/presentations/2022-03-10-prl/</link><pubDate>Thu, 10 Mar 2022 00:00:00 +0000</pubDate><guid>https://galactic-forensics.space/resources/presentations/2022-03-10-prl/</guid><description>&lt;p>This talk, given at the Physical Research Laboratory in Ahmedabad, India, presents an introduction to analyzing presolar stardust grains by resonance ionization mass spectrometry. It also introduces the basics of stellar evolution of low-mass stars and its implication on the slow neutron-capture process nuclei. The interplay between stardust analysis and s-process nucleosynthesis models is discussed.&lt;/p></description></item><item><title>Resonance Ionization Mass Spectrometry</title><link>https://galactic-forensics.space/resources/presentations/2022-02-28-epfl/</link><pubDate>Mon, 28 Feb 2022 00:00:00 +0000</pubDate><guid>https://galactic-forensics.space/resources/presentations/2022-02-28-epfl/</guid><description>&lt;p>This talk is geared heavily towards mass spectrometrists that are interested
in resonance ionization mass spectrometry and want to know more on how
it works. The science is kept to a minimum and the talk mainly focuses on
the technical aspects.&lt;/p></description></item><item><title>Resources for Programming</title><link>https://galactic-forensics.space/resources/mind-bytes/resources_programming/</link><pubDate>Tue, 25 Jan 2022 00:00:00 +0000</pubDate><guid>https://galactic-forensics.space/resources/mind-bytes/resources_programming/</guid><description>&lt;p>Sooner or later, most scientist have to automate certain tasks.
It is generally advisable to leave such repetitive things that can be
automated to the computer. Here we have a look at tools that might help with
this task.&lt;/p>
&lt;p>First things first: this is by no means going to be a comprehensive article,
but will rather be my own, fairly biased view, which heavily focuses on
&lt;a href="https://www.python.org/" target="_blank" rel="noopener">&lt;code>python&lt;/code>&lt;/a> and
&lt;a href="https://git-scm.com/" target="_blank" rel="noopener">&lt;code>git&lt;/code>&lt;/a>.
It hopefully starts simple, and then gets more advanced fast.&lt;/p>
&lt;h2 id="python">Python&lt;/h2>
&lt;p>Python is a scripted computer language that allows you to do many scientific
tasks, e.g., data evaluation, automatically. It is a fairly simple language to
learn, and you can get going fast, however, be open to learn more advanced
techniques later on. This means: Never stop learning! Python has many advanced
capabilities that can make your life easier and faster.&lt;/p>
&lt;h3 id="learning-python">Learning Python&lt;/h3>
&lt;p>
&lt;a href="https://software-carpentry.org/lessons/" target="_blank" rel="noopener">Software Carpentry&lt;/a> has two great
lessons on &lt;code>python&lt;/code>, which are especially suited for beginners. These lessons
should give you an introduction and overview of the language, but also teach
you how to plot figures using &lt;code>matplotlib&lt;/code>.&lt;/p>
&lt;p>A great book to introduce you python was written by Allen Downy and can
be found
&lt;a href="https://greenteapress.com/wp/think-python-2e/" target="_blank" rel="noopener">here&lt;/a>. It is available
for free. The book gives an in-depth introduction into &lt;code>python&lt;/code>, but also into
the basics behind the language. Such knowledge is always helpful later on,
since it gives you a deeper understanding of certain behavior.&lt;/p>
&lt;h3 id="working-with-python">Working with Python&lt;/h3>
&lt;p>The official &lt;code>python&lt;/code> distribution is distributed from
&lt;a href="https://www.python.org" target="_blank" rel="noopener">python.org&lt;/a>.
If you install this distribution, you can add further packages using
&lt;a href="https://pip.pypa.io/en/stable/" target="_blank" rel="noopener">&lt;code>pip&lt;/code>&lt;/a>.
However, this is not always the most straight forward way to work with &lt;code>python&lt;/code>.&lt;/p>
&lt;h4 id="virtual-environments">Virtual environments&lt;/h4>
&lt;p>Virtual environments should be considered for all your projects. Depending
on what &lt;code>python&lt;/code> environment you are using, these environments will be
created different. It is worth looking into it.&lt;/p>
&lt;h4 id="anaconda">Anaconda&lt;/h4>
&lt;p>For data processing and scientific python, check out
&lt;a href="https://www.anaconda.com/products/individual" target="_blank" rel="noopener">Anaconda&lt;/a>. This gives you a
&lt;code>conda&lt;/code> environment for &lt;code>python&lt;/code>. Furthermore, Anaconda comes with many
packages pre-installed and has a graphical manager to handle your distribution.
This can be advantageous, depending on what you need.&lt;/p>
&lt;h4 id="pyenv">&lt;code>pyenv&lt;/code>&lt;/h4>
&lt;p>If you need to handle multiple different python versions and want
to easily manage virtual environments, check out
&lt;a href="https://github.com/pyenv/pyenv" target="_blank" rel="noopener">&lt;code>pyenv&lt;/code>&lt;/a>.&lt;/p>
&lt;h4 id="jupyter">Jupyter&lt;/h4>
&lt;p>Finally, Jupyter Notebooks give a straight forward interface
to &lt;code>python&lt;/code> that allow you to play and develop code in a browser, as well as
to document it in
&lt;a href="https://www.markdownguide.org/" target="_blank" rel="noopener">Markdown&lt;/a>.
Googles flavor of Jupyter is called
&lt;a href="https://colab.research.google.com/" target="_blank" rel="noopener">Google Collab&lt;/a> and run on the web.
JetBrains, the creator of PyCharm, also has an online Jupyter Notebook
Server with is especially great for developing at the same time. It is
called
&lt;a href="https://datalore.jetbrains.com/" target="_blank" rel="noopener">Datalore&lt;/a>.&lt;/p>
&lt;p>For Astrophysics, especially if you are interested in
&lt;a href="https://nugrid.github.io/" target="_blank" rel="noopener">NuGrid&lt;/a> data, check out the
&lt;a href="https://astrohub.uvic.ca/" target="_blank" rel="noopener">Astrohub&lt;/a>. You can log into the public outreach
server with your GitHub account and then use a JupyterLab environment to run
your astrophysics models.&lt;/p>
&lt;h4 id="editors">Editors&lt;/h4>
&lt;p>Many good python editors exist. Personally, I prefer
&lt;a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">PyCharm&lt;/a>, however, many other options.
PyCharm is a fully integrated developer environment (IDE) and comes with many
more tools than you need in the beginning, it can therefore be overwhelming at
first.&lt;/p>
&lt;p>Other notable editors are
&lt;a href="https://www.spyder-ide.org/" target="_blank" rel="noopener">Spyder&lt;/a>, which is a full
IDE that comes pre-installed with Anaconda. Also notable is
&lt;a href="https://www.sublimetext.com/" target="_blank" rel="noopener">Sublime Text&lt;/a>, which works in my workflow
especially well for scripting.
&lt;a href="https://www.tabnine.com/blog/python-on-sublime-text/" target="_blank" rel="noopener">Here&lt;/a>
is a great article on how to set up Sublime Text for python.&lt;/p>
&lt;h3 id="guis">GUIs&lt;/h3>
&lt;p>If you are interested in creating graphical user interfaces for your programs,
it is worth looking into GUIs. Two potential GUI creation packages that you
might want to consider using are
&lt;a href="https://www.riverbankcomputing.com/software/pyqt/intro/" target="_blank" rel="noopener">&lt;code>PyQt&lt;/code>&lt;/a> or
&lt;a href="https://wiki.qt.io/PySide2" target="_blank" rel="noopener">&lt;code>PySide&lt;/code>&lt;/a>.
Great tutorials on Qt can be found
&lt;a href="https://www.pythonguis.com/pyqt5-tutorial/" target="_blank" rel="noopener">here&lt;/a>.&lt;/p>
&lt;p>If you want to package your GUIs with installers,
check out
&lt;a href="https://build-system.fman.io/" target="_blank" rel="noopener">&lt;code>fbs&lt;/code>&lt;/a>. Note that the open / free
version only supports &lt;code>python-3.6&lt;/code> and is restricted to &lt;code>PyQt5&lt;/code>. If you want
to dabble with the pro version, let me know.&lt;/p>
&lt;h3 id="advanced-python">Advanced Python&lt;/h3>
&lt;h4 id="auto-formatting">Auto-formatting&lt;/h4>
&lt;p>Formatting &lt;code>python&lt;/code> code should adhere - for readability - to certain rules.
These are often also referred as linting requirements. While it is tedious to
format code by hand, automatic formatters are very helpful. I generally use
&lt;a href="https://github.com/psf/black" target="_blank" rel="noopener">&lt;code>black&lt;/code>&lt;/a> to format my &lt;code>python&lt;/code> code.
The beauty of this is that it there are not many possibilities to format your
code, therefore, most of the decisions are already made, and it always looks
awesome. Various plugins exist that can be used in editors and IDEs.
&lt;a href="https://www.duckduckgo.com" target="_blank" rel="noopener">Search engines&lt;/a> are useful to find them.&lt;/p>
&lt;h4 id="test-your-code">Test your code!&lt;/h4>
&lt;p>Testing of code is crucial, since you generally want to make sure that your
scripts, functions, classes, etc., do what you want them to do.
An amazing package to test your python code is
&lt;a href="https://docs.pytest.org/en/6.2.x/" target="_blank" rel="noopener">&lt;code>pytest&lt;/code>&lt;/a>. If you are interested in
learning testing with python, check out Brian Okken&amp;rsquo;s book
&lt;a href="https://pythontest.com/pytest-book/" target="_blank" rel="noopener">here&lt;/a>.&lt;/p>
&lt;h2 id="git">Git&lt;/h2>
&lt;p>When working with code, version control should be an integral part of your
workflow. One way of controlling versions is with &lt;code>git&lt;/code>.
The Galactic Forensics Laboratory has its &lt;code>git&lt;/code> repositories hosted
&lt;a href="https://github.com/galactic-forensics" target="_blank" rel="noopener">here on GitHub&lt;/a>. Lab members get
access to all repositories of the lab.&lt;/p>
&lt;h3 id="learning-git">Learning &lt;code>git&lt;/code>&lt;/h3>
&lt;p>The best way to learn &lt;code>git&lt;/code> and / or to review your skill is by going through
&lt;a href="https://swcarpentry.github.io/git-novice/" target="_blank" rel="noopener">this course on Software Carpentry&lt;/a>.
The next step is then to use &lt;code>git&lt;/code> and, if you want to keep your repos online,
a service such as
&lt;a href="https://github.com" target="_blank" rel="noopener">GitHub&lt;/a>. You can also browse the &lt;code>git&lt;/code>
book, which is available for free
&lt;a href="https://git-scm.com/book/en/v2" target="_blank" rel="noopener">here&lt;/a>.&lt;/p>
&lt;p>The beauty of &lt;code>git&lt;/code> is that you can most of the time go back in time if you
made a mistake. So don&amp;rsquo;t worry if something happens! A good resource for
these weird cases is
&lt;a href="https://dangitgit.com/" target="_blank" rel="noopener">Dangit Git&lt;/a>.&lt;/p>
&lt;h3 id="good-practices">Good practices&lt;/h3>
&lt;p>If you want to contribute code to a repository of which you are not a
maintainer, you should fork the repository to your own GitHub account.
Then create a branch with an appropriate name for the feature you want to
contribute. Add your changes, push your branch to your fork, and then create
a pull request where you describe what you have changed and why. Keep it short,
but descriptive.&lt;/p>
&lt;p>Most projects, e.g., the
&lt;a href="https://github.com/galactic-forensics/iniabu" target="_blank" rel="noopener">&lt;code>iniabu&lt;/code>&lt;/a>
project have a developers guide that gives you additional information on
how to contribute. For &lt;code>iniabu&lt;/code>, you can find the guide, e.g.,
&lt;a href="https://iniabu.readthedocs.io/en/latest/dev/index.html" target="_blank" rel="noopener">here in the docs&lt;/a>.&lt;/p>
&lt;h3 id="advanced-git-and-github">Advanced &lt;code>git&lt;/code> and GitHub&lt;/h3>
&lt;h4 id="pre-commit">&lt;code>pre-commit&lt;/code>&lt;/h4>
&lt;p>If you are using &lt;code>git&lt;/code> regularly, especially on public projects, &lt;code>pre-commit&lt;/code>
can help you to automate tasks. You can install so-called &lt;code>hooks&lt;/code> that help
you perform various tasks, e.g., formatting, etc. Check out the
&lt;a href="https://pre-commit.com/" target="_blank" rel="noopener">&lt;code>pre-commit&lt;/code> website&lt;/a>.&lt;/p>
&lt;h4 id="github-actions">GitHub Actions&lt;/h4>
&lt;p>For automatic testing on GitHub, consider using
&lt;a href="https://github.com/features/actions" target="_blank" rel="noopener">GitHub Actions&lt;/a>. These actions can
especially help when using continuous integration (CI).&lt;/p>
&lt;h2 id="some-more-advanced-resources">Some more advanced resources&lt;/h2>
&lt;h3 id="code-coverage">Code coverage&lt;/h3>
&lt;p>When testing your python code, it is useful to know how many lines of your
code are actually tested by your test suite. To automate this process,
you can, e.g., use GitHub hooks for
&lt;a href="https://coveralls.io/" target="_blank" rel="noopener">&lt;code>coveralls&lt;/code>&lt;/a>.&lt;/p>
&lt;h3 id="documentation">Documentation&lt;/h3>
&lt;p>Last, but surely not least, you will likely make extensive use of great
documentations that you can find online. For &lt;code>python&lt;/code> code, automatic
documentation using your doc strings can be really helpful. One tool to do so
is
&lt;a href="https://www.sphinx-doc.org/en/master/" target="_blank" rel="noopener">&lt;code>sphinx&lt;/code>&lt;/a>.
This is especially powerful in combination with
&lt;a href="https://readthedocs.org/" target="_blank" rel="noopener">ReadTheDocs&lt;/a>, which can also be implemented with
a GitHub hook.&lt;/p>
&lt;h3 id="hypermodern-python">Hypermodern Python&lt;/h3>
&lt;p>Finally, if you want to code in &lt;code>python&lt;/code> using many bells and whistles,
check out the blog articles on hypermodern python by Claudio Jolowicz.
The series can be found
&lt;a href="https://cjolowicz.github.io/posts/" target="_blank" rel="noopener">here&lt;/a>, the
first article
&lt;a href="https://cjolowicz.github.io/posts/hypermodern-python-01-setup/" target="_blank" rel="noopener">here&lt;/a>.&lt;/p></description></item><item><title>Introduction to Building Electronics Projects with Arduino</title><link>https://galactic-forensics.space/resources/courses/arduino_electronics/</link><pubDate>Mon, 15 Nov 2021 00:00:00 +0000</pubDate><guid>https://galactic-forensics.space/resources/courses/arduino_electronics/</guid><description>&lt;p>Scientific experiments often require that
scientists build their own setup.
Inexpensive microelectronics, such as
&lt;a href="https://www.arduino.cc" target="_blank" rel="noopener">Arduino&lt;/a>,
can furthermore help to automate certain repetitive tasks.&lt;/p>
&lt;p>In this workshop,
students with a basic understanding of electrical circuits
learn how to develop a scientific setup using Arduino.
They are introduced to various components step-by-step
until the final project,
an Arduino controlled sample cooling stage,
is fully implemented and working.
The notes for the workshop are intended for students
to go through them by themselves
and do the exercises.
In my opinion,
a topic such as this one can only be learned
by exercises, tinkering, and playing with the components.
Therefore, the workshop notes encourage students to do exactly that.&lt;/p>
&lt;p>All documents, code solutions, answers to questions, 3d designs, wiring diagrams,
etc. of this course,
including the LaTeX source files are available on
&lt;a href="https://github.com/galactic-forensics/workshop_arduino_electronics" target="_blank" rel="noopener">GitHub&lt;/a>.
All original files are published under the
&lt;a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="noopener">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License&lt;/a>.
A direct link to the lecture note PDF file is also given
on top of this page.&lt;/p></description></item><item><title>The Curious Case of $^{60}$Fe in the Early Solar System</title><link>https://galactic-forensics.space/resources/presentations/2021-09-22-nic/</link><pubDate>Wed, 22 Sep 2021 00:00:00 +0000</pubDate><guid>https://galactic-forensics.space/resources/presentations/2021-09-22-nic/</guid><description>&lt;p>This invited talk reviews the discrepancies between in situ and bulk measurements
of the initial &lt;sup>60&lt;/sup>Fe abundance in the early Solar System. The
abundance of this short-lived radionuclide is important to constrain precisely
since it informs the source that contributed the &lt;sup>26&lt;/sup>Al that was present
in the solar nebula. The presentation discusses the new re-evaluation of the
in-situ secondary ion mass spectrometry (SIMS) measurements and discusses
the implications of this re-evaluation.&lt;/p>
&lt;p>The talk was presented at the 16&lt;sup>th&lt;/sup> Symposium on Nuclei in the Cosmos.
A link to the meeting website can be found
&lt;a href="https://indico.juna.ac.cn/event/1/" target="_blank">here&lt;/a>.&lt;/p></description></item><item><title>On the Origin of Elements in the Milky Way</title><link>https://galactic-forensics.space/resources/courses/origin_elements/</link><pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate><guid>https://galactic-forensics.space/resources/courses/origin_elements/</guid><description>&lt;p>The Big Bang only formed hydrogen and helium. All other elements,
e.g., the ones we are made of,
were subsequently formed in stars. This course discusses how these elements
formed and how we can directly measure and probe nucleosynthesis and galactic
chemical evolution.
The course starts with the solar composition, i.e.,
the composition of the Solar System that we are ultimately trying to explain.
It then goes back to the Big Bang to start with the first nucleosynthesis events.
From here on, the course loops through various stellar nucleosynthesis events
and discusses observations and measurements along the way that help us
to understand how the elements we are all made of formed in the first place.&lt;/p>
&lt;p>This course was first held at Brandeis University in Spring 2021
and is geared as an elective course towards advanced undergraduates and
early graduate students. The course is design as a mixture between
lectures and reading / discussion of original scientific manuscripts.&lt;/p>
&lt;p>All documents, homework sets, etc. of this course,
including the LaTeX source files are available on
&lt;a href="https://github.com/galactic-forensics/lecture_origin_elements" target="_blank" rel="noopener">GitHub&lt;/a>.
All original files are published under the
&lt;a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="noopener">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License&lt;/a>.
A direct link to the lecture note PDF file is also given
on top of this page.&lt;/p></description></item><item><title>New Opportunities with Stardust</title><link>https://galactic-forensics.space/resources/presentations/2020-12-02-jina-horizons/</link><pubDate>Wed, 02 Dec 2020 00:00:00 +0000</pubDate><guid>https://galactic-forensics.space/resources/presentations/2020-12-02-jina-horizons/</guid><description>&lt;p>This brief presentation reviews some recent highlights of stardust research
and how it can be used to better understand astrophysical processes such as
the slow neutron capture process and the formation of proton- and neutron-rich
nuclides. Finally, the presentation discusses future opportunities with stardust
and how these measurements could help to further our knowledge of
galactic chemical evolution.&lt;/p>
&lt;p>The talk was presented at the virtual 2020 JINA Horizons Meeting.
A link to the meeting website can be found
&lt;a href="https://indico.frib.msu.edu/event/39/" target="_blank">here&lt;/a>.&lt;/p></description></item><item><title>iniabu: Getting Solar System Abundances in Python</title><link>https://galactic-forensics.space/resources/presentations/2020-10-27-nugrid/</link><pubDate>Tue, 27 Oct 2020 00:00:00 +0000</pubDate><guid>https://galactic-forensics.space/resources/presentations/2020-10-27-nugrid/</guid><description>&lt;p>A brief presentation to discuss the current status of the
&lt;code>iniabu&lt;/code> package available on
&lt;a href="https://github.com/galactic-forensics/iniabu" target="_blank">GitHub&lt;/a>.
Some short demonstrations are given.
A more complete usage guide can be found
&lt;a href="https://iniabu.readthedocs.io" target="_blank">here&lt;/a>.&lt;/p></description></item></channel></rss>